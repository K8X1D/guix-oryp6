:DOC-CONFIG:
#+PROPERTY: header-args :mkdirp yes
#+STARTUP: fold
:END:

#+TITLE: K8x1d Oryp6: configuration file(s)
#+AUTHOR: Kevin Kaiser
#+EMAIL: k8x1d@protonmail.ch

# TODO: add manifest
* Description of the system
Machines tested on:
- System76 oryx pro (oryp6)
** Modules in use
#+BEGIN_SRC scheme :tangle system.scm :noweb yes
  (use-modules (gnu)
               (nongnu packages linux)
               (nongnu system linux-initrd)
               (nongnu packages nvidia)
               (gnu system nss)
               (srfi srfi-1))
#+END_SRC

** Services modules
#+BEGIN_SRC scheme :tangle system.scm :noweb yes
  (use-service-modules
   desktop ;; desktop
   linux ;; module-loader
   nix ;; nix
   file-sharing ;; transmission
   xorg ;; xorg-configuration
   docker ;; docker
   networking ;; network-manager
   cups ;; cups
   audio ;; mpd
   databases ;; postgresql
   pm ;; tlp, thermald
   sddm ;;sddm
   ;;lightdm ;; lightdm
   )
#+END_SRC

** Packages modules
#+BEGIN_SRC scheme :tangle system.scm :noweb yes
(use-package-modules
 certs ;; nss-certs
 databases ;; postgresql
 xdisorg ;; redshift
 fonts ;; dejavu, juliamono, freefont
 gnome ;; network-manager-openvpn
 wm ;; 13
 music ;; playctl
 linux ;; brightnessctl
 dunst ;; dunst
 terminals ;; alacritty
 freedesktop ;; libinput
 package-management ;; for nix
 image-viewers ;; feh
 compton ;; picom
 pulseaudio ;; pavucontrol
 xorg ;; xset
 )
#+END_SRC

* Custom configurations
** Reverse prime configuration
#+BEGIN_SRC scheme :tangle system.scm :noweb yes
  (define nvidia-dgpu.conf
    "
    Section \"ServerLayout\"
          Identifier \"layout\"
          Screen 0 \"iGPU\"
          Inactive \"dGPU\"
          Option \"AllowNVIDIAGPUScreens\"
    EndSection

    Section \"Device\"
       Identifier \"iGPU\"
       Driver \"modesetting\"
       BusID \"PCI:0:2:0\"
     EndSection

     Section \"Screen\"
       Identifier \"iGPU\"
       Device \"iGPU\"
     EndSection

     Section \"Device\"
       Identifier \"dGPU\"
       Driver \"nvidia\"
       BusID \"PCI:1:0:0\"
     EndSection
     "
    )
#+END_SRC

** Keyboard layout
#+BEGIN_SRC scheme :tangle system.scm :noweb yes
  (define my-keyboard-layout
    (keyboard-layout "ca" "fr"
                     #:options '("ctrl:nocaps" "altwin:menu_win")))

#+END_SRC

** Xorg configuration
#+BEGIN_SRC scheme :tangle system.scm :noweb yes
  (define my-xorg-conf
    (xorg-configuration
     (keyboard-layout my-keyboard-layout)
     (modules
      (cons*
       nvidia-driver
       ;;     nvidia-module
       (remove
        (lambda (pkg)
          (member pkg
                  (list
                   xf86-video-amdgpu
                   xf86-video-ati
                   xf86-video-cirrus
                   xf86-video-intel
                   xf86-video-mach64
                   xf86-video-nouveau
                   xf86-video-nv
                   xf86-video-sis)))
        %default-xorg-modules)))
     (extra-config (list nvidia-dgpu.conf))
     (drivers '("modesetting" "nvidia"))))
#+END_SRC

** Udev rules
Allow members of the "video" group to change the screen brightness.
#+BEGIN_SRC scheme :tangle system.scm :noweb yes
  (define %backlight-udev-rule
    (udev-rule
     "90-backlight.rules"
     (string-append "ACTION==\"add\", SUBSYSTEM==\"backlight\", "
                    "RUN+=\"/run/current-system/profile/bin/chgrp video /sys/class/backlight/%k/brightness\""
                    "\n"
                    "ACTION==\"add\", SUBSYSTEM==\"backlight\", "
                    "RUN+=\"/run/current-system/profile/bin/chmod g+w /sys/class/backlight/%k/brightness\"")))
#+END_SRC

Set initial brightness
#+BEGIN_SRC scheme :tangle system.scm :noweb yes
  (define %initial-backlight-udev-rule
    (udev-rule
     "81-backlight.rules"
     (string-append "SUBSYSTEM==\"backlight\", ACTION==\"add\", KERNEL==\"acpi_video0\", ATTR{brightness}=\"1\"")))
#+END_SRC

** Desktop services
- add udev rules
- Access nonguix subtitute
- delete gdm since sddm is used
#+BEGIN_SRC scheme :tangle system.scm :noweb yes
(define %my-desktop-services
  (modify-services %desktop-services
                   (udev-service-type config =>
                                      (udev-configuration (inherit config)
                                                          (rules (cons* %backlight-udev-rule
                                                                        %initial-backlight-udev-rule
                                                                        (udev-configuration-rules config)))))
                   (guix-service-type config => (guix-configuration
                                                 (inherit config)
                                                 (substitute-urls
                                                  (append (list "https://substitutes.nonguix.org" ;; nonguix
                                                                ;;"https://guix.bordeaux.inria.fr" ;; hpc
                                                                ;;"https://substitutes.guix.psychnotebook.org" ;; guix-science ;; broke often...
                                                                )
                                                          ;;(append (list "https://substitutes.nonguix.org")
                                                          %default-substitute-urls))
                                                 (authorized-keys
                                                  ;;(append (list (local-file "./nonguix-signing-key.pub")
                                                  ;;              (local-file "./science-signing-key.pub"))
                                                  ;;        %default-authorized-guix-keys))))
                                                    (append (list
                                                        (plain-file "non-guix.pub"
                                                                    "(public-key
                                                                       (ecc
                                                                         (curve Ed25519)
                                                                         (q #C1FD53E5D4CE971933EC50C9F307AE2171A2D3B52C804642A7A35F84F3A4EA98#)
                                                                       )
                                                                     )")
                                                        (plain-file "guix-science.pub"
                                                                    "(public-key
                                                                       (ecc
                                                                         (curve Ed25519)
                                                                         (q #D4E1CAFAB105581122B326E89804E3546EF905C0D9B39F161BBD8ABB4B11D14A#)
                                                                       )
                                                                     )")
                                                        (plain-file "guix-hpc.pub"
                                                                    "(public-key
                                                                       (ecc
                                                                         (curve Ed25519)
                                                                         (q #89FBA276A976A8DE2A69774771A92C8C879E0F24614AAAAE23119608707B3F06#)
                                                                       )
                                                                     )"))
                                                    %default-authorized-guix-keys))))
                   (network-manager-service-type config =>
                                                 (network-manager-configuration (inherit config)
                                                                                (vpn-plugins (list network-manager-openvpn
                                                                                                   network-manager-openconnect))))
                   (delete gdm-service-type)
                   ))
#+END_SRC

* Operating system
#+BEGIN_SRC scheme :tangle system.scm :noweb yes
    (operating-system
#+END_SRC
** System configuration
#+BEGIN_SRC scheme :tangle system.scm :noweb yes
  (host-name "oryp6")
  ;;(timezone "America/Edmonton")
  (timezone "America/New_York")
  (locale "en_US.utf8")
  (keyboard-layout my-keyboard-layout)
#+END_SRC

** Kernel
#+BEGIN_SRC scheme :tangle system.scm :noweb yes
  (kernel linux-lts)
  (kernel-loadable-modules (list nvidia-driver))
  ;;(kernel-loadable-modules (list nvidia-module))
  (kernel-arguments (list
                     ;; Nvidia set-up
                     "nvidia_drm.modeset=1"
                     "nvidia.NVreg_DynamicPowerManagement=0x02"
                     "modprobe.blacklist=nouveau"
                     ;; Fix audio problem: headphone hissing on right ear; cost: loose microphone for headphone
                     ;;"snd_hda_intel.model=clevo-p950"
                     ;;"snd-hda-intel.power-save=0"
                     ;;"snd_hda_intel.power_save=0"
                     "nmi_watchdog=0"))
  (initrd microcode-initrd)
  (initrd-modules %base-initrd-modules)
  (firmware (list linux-firmware))
#+END_SRC

** Bootloader
#+BEGIN_SRC scheme :tangle system.scm :noweb yes
;; Use the UEFI variant of GRUB with the EFI System
;; Partition mounted on /boot/efi.
(bootloader (bootloader-configuration
             (bootloader grub-efi-bootloader)
             (targets '("/boot/efi"))
             (timeout 5)
             (keyboard-layout my-keyboard-layout)
             (menu-entries (list
                            (menu-entry
                             (label "Pop!_OS")
                             (linux "/boot/vmlinuz-5.18.10-76051810-generic")
                             (linux-arguments '("root=/dev/nvme1n1p3"))
                             (initrd "/boot/initrd.img-5.18.10-76051810-generic"))
                            ;; TODO: repair entry
                            ;;(menu-entry
                            ;; (label "NixOS")
                            ;; (linux "/boot/efi/vmlinuz-5.15.34-0-generic")
                            ;; (linux-arguments '("root=/dev/nvme1n1p8"))
                            ;; (initrd "/boot/efi/initrd.img-5.15.34-0-generic"))
                            ))
             ))
#+END_SRC

** Filesystem
#+BEGIN_SRC scheme :tangle system.scm :noweb yes
  ;; Assume the target root file system is labelled "my-root",
  ;; and the EFI System Partition has UUID 1234-ABCD.
  (file-systems (append
                 (list (file-system
                        (device (uuid "e896af2f-15f1-4503-9564-975e93e79f40" 'ext4))
                        (mount-point "/")
                        (type "ext4"))
                       (file-system
                        (device (uuid "e45224c0-20bd-4ba8-880d-2bb84827dce7" 'ext4))
                        (mount-point "/home")
                        (type "ext4"))
                       (file-system
                        (device (uuid "7eb6c440-b26d-48d9-b8e9-bce47a46dfa1" 'ext4))
                        (mount-point "/shared")
                        (type "ext4"))
                       (file-system
                        (device (uuid "d3900119-e611-4e5a-887c-cd1dbf3711b4" 'ext4))
                        (mount-point "/extension")
                        (type "ext4"))
                       (file-system
                        (device (uuid "0554-6F13" 'fat))
                        (mount-point "/boot/efi")
                        (type "vfat")))
                 %base-file-systems))
#+END_SRC

#+BEGIN_SRC scheme :tangle system.scm :noweb yes
  (swap-devices (list
                 (swap-space
                  (target
                   (uuid "6e1c9e15-4904-4d63-877d-2001773ec067"))))) ;; test
#+END_SRC

** User(s)
#+BEGIN_SRC scheme :tangle system.scm :noweb yes
      (users (cons (user-account
                    (name "k8x1d")
                    (comment "Kevin Kaiser")
                    (group "users")
                    ;;(shell (file-append zsh "/bin/zsh"))
                    (supplementary-groups '("wheel" "netdev"
                                            "audio" "video"
                                            "lp" "docker"
  )))
                   %base-user-accounts))
#+END_SRC

** System-wide packages
#+BEGIN_SRC scheme :tangle system.scm :noweb yes
  (packages (append (list
                     ;; EXWM set-up
                     ;;emacs emacs-exwm emacs-desktop-environment
                     ;;emacs-next-pgtk

                     ;; i3 set-up ;;;;
                     i3-gaps ;; package version
                     polybar ;; bar
                     i3lock-color ;; lockscreen
                     alacritty ;; terminal
                     feh ;; wallpaper
                     picom ;; compositor
                     redshift ;; color temperature
                     pavucontrol ;; pulseaudio gui
                     pulseaudio ;; pulseaudio cli
                     xset ;; set keyboard rate
                     setxkbmap ;; set keyboard-layout
                     xss-lock ;; manage lock before-sleep
                     xinput ;; set touchpad
                     xrandr ;; screen manipulation
                     playerctl ;; extra
                     rofi ;;launcher
                     brightnessctl ;; brightness
                     dunst ;; notifications

                     ;; sway set-up
                     sway swayidle swaybg waybar bemenu swaylock-effects foot libnotify fnott
                     ;; Bluetooth
                     bluez
                     ;; utilities
                     acpi
                     ;;awesome-wm
                     ;;awesome
                     ;;stumpwm
                     ;;sbcl stumpwm `(,stumpwm "lib")

                     ;; Power management
                     tlp
                     ;; Fonts
                     font-dejavu font-juliamono font-gnu-freefont
                     ;; Extra packages
                     nix flatpak
                     ;; Drivers
                     nvidia-driver
                     ;; nvidia-module
                     nvidia-libs
                     ;; For user mounts
                     gvfs
                     ;; for HTTPS access
                     nss-certs)
                    %base-packages))
#+END_SRC

** Services specifications
*** Header
#+BEGIN_SRC scheme :tangle system.scm :noweb yes
      (services (cons*
#+END_SRC

*** Services
Gnome
#+BEGIN_SRC scheme :tangle system.scm :noweb yes
;;(service gnome-desktop-service-type)
#+END_SRC

Nvidia
#+BEGIN_SRC scheme :tangle system.scm :noweb yes
(simple-service 'custom-udev-rules udev-service-type (list nvidia-driver))
;;(simple-service 'custom-udev-rules udev-service-type (list nvidia-module))
(service kernel-module-loader-service-type
         '("nvidia"
           "nvidia_modeset"))
           ;;"nvidia_uvm"))
#+END_SRC
Databases
#+BEGIN_SRC scheme :tangle system.scm :noweb yes
  (service docker-service-type) ;; TODO: investigate when high increase startup-time, TODO: change data-root to save space on root
  (service postgresql-service-type
           (postgresql-configuration
            (data-directory "/shared/Databases/postgresql/data")
            (postgresql postgresql-14)))
  (service postgresql-role-service-type
           (postgresql-role-configuration
            (roles
             (list (postgresql-role
                    (name "k8x1d")
                    (permissions '(createdb login superuser))
                    (create-database? #t))))))
#+END_SRC

Printers
#+BEGIN_SRC scheme :tangle system.scm :noweb yes
  (service cups-service-type
           (cups-configuration
            (web-interface? #t)))
#+END_SRC

VPN
#+BEGIN_SRC scheme :tangle system.scm :noweb yes
  ;;(openvpn-client-service)
#+END_SRC

Music
#+BEGIN_SRC scheme :tangle system.scm :noweb yes
 ;; (service mpd-service-type
 ;;          (mpd-configuration
 ;;           (outputs
 ;;            (list (mpd-output
 ;;                   (name "PipeWire Sound Server")
 ;;                   (type "pipewire"))
 ;;                  ))))

  (service mpd-service-type
           (mpd-configuration
            (outputs
             (list (mpd-output
                    (name "pulse audio")
                    (type "pulse"))))
                   (user "k8x1d")))

#+END_SRC

Power management
#+BEGIN_SRC scheme :tangle system.scm :noweb yes
  ;;(service tlp-service-type
  ;;         (tlp-configuration
  ;;          (cpu-scaling-governor-on-ac (list "powersave")) ;; not diff alon on temp
  ;;          (energy-perf-policy-on-ac "powersave") ;; not diff alon on temp
  ;;          (sched-powersave-on-ac? #t) ;; not diff alon on temp
  ;;          (max-lost-work-secs-on-ac 60) ;; not diff alon on temp
  ;;          (disk-idle-secs-on-ac 2)
  ;;          (cpu-min-perf-on-bat 0)
  ;;          (cpu-max-perf-on-bat 30)
  ;;          (cpu-min-perf-on-ac 0)
  ;;          (cpu-max-perf-on-ac 100)
  ;;          ;;(cpu-boost-on-ac? enabled)
  ;;          (sound-power-save-on-bat 0) ;; don't change kernel parameters
  ;;          (pcie-aspm-on-ac "powersave")
  ;;          (start-charge-thresh-bat0 85)
  ;;          (stop-charge-thresh-bat0 90)
  ;;          (runtime-pm-on-ac "auto")))
  (service tlp-service-type)
  (service thermald-service-type)
#+END_SRC


File-sharing
#+BEGIN_SRC scheme :tangle system.scm :noweb yes
  ;; Torrents
  (service transmission-daemon-service-type
           (transmission-daemon-configuration
            (download-dir "/shared/torrents")
            (alt-speed-down (* 1024 2)) ;   2 MB/s
            (alt-speed-up 512)))          ; 512 kB/s
#+END_SRC

System commodities
#+BEGIN_SRC scheme :tangle system.scm :noweb yes
  (bluetooth-service #:auto-enable? #f)
  (service nix-service-type)
#+END_SRC

Lock screen
#+BEGIN_SRC scheme :tangle system.scm :noweb yes
(screen-locker-service i3lock-color "i3lock")
(screen-locker-service swaylock-effects "swaylock")
#+END_SRC

Login Managers
#+BEGIN_SRC scheme :tangle system.scm :noweb yes
;;(service sddm-service-type
;;         (sddm-configuration
;;          (xorg-configuration my-xorg-conf)))
(service sddm-service-type
(sddm-configuration
(themes-directory "/shared/Documents/Logiciels/guix_set-up/sddm/themes")
(theme "sugar-dark")
            ;;;;(sddm (fixpkg sddm)) ;; seem to cause black screen
            ;;;;(xdisplay-start "/home/k8x1d/start-up")
            ;;;;(xsession-command "/shared/Projects/Logiciels/.xinitrc") ;; test
            ;;;;(xsession-command picom)
            (sessions-directory "/shared/Documents/Logiciels/guix_set-up/sddm/wayland-sessions")
;;(xsessions-directory "/shared/Documents/Logiciels/guix_set-up/sddm/x-sessions")
(xorg-configuration my-xorg-conf)))
#+END_SRC


#+BEGIN_SRC scheme :tangle system.scm :noweb yes
;;(service lightdm-service-type (lightdm-configuration
;;                               (xorg-configuration my-xorg-conf)))
#+END_SRC


#+BEGIN_SRC scheme :tangle system.scm :noweb yes
;;(service slim-service-type (slim-configuration
;;                            (display ":0")
;;                            (vt "vt7")
;;                            (default-user "k8x1d")
;;                            (xorg-configuration my-xorg-conf)))
#+END_SRC


#+BEGIN_SRC scheme :tangle system.scm :noweb yes
;;  (service gdm-service-type
;;           (gdm-configuration
;;            (wayland? #t)
;;            (xorg-configuration my-xorg-conf)))
#+END_SRC

Desktop services
#+BEGIN_SRC scheme :tangle system.scm :noweb yes
  %my-desktop-services
#+END_SRC

*** Footer
#+BEGIN_SRC scheme :tangle system.scm :noweb yes
  ))
#+END_SRC

** Others
#+BEGIN_SRC scheme :tangle system.scm :noweb yes
  ;; Allow resolution of '.local' host names with mDNS.
  (name-service-switch %mdns-host-lookup-nss)
#+END_SRC


#+BEGIN_SRC scheme :tangle system.scm :noweb yes
    )
#+END_SRC

* Channels
** Header
#+BEGIN_SRC scheme :tangle channels.scm :noweb yes
    (list
#+END_SRC

** Guix channel
#+BEGIN_SRC scheme :tangle channels.scm :noweb yes
  (channel
   (name 'guix)
   (url "https://git.savannah.gnu.org/git/guix.git")
   (branch "master")
   ;;(commit
   ;;  "056935506b8b5550ebeb3acfc1d0c3b4f11b6a2e")
   (introduction
    (make-channel-introduction
     "9edb3f66fd807b096b48283debdcddccfea34bad"
     (openpgp-fingerprint
      "BBB0 2DDF 2CEA F6A8 0D1D  E643 A2A0 6DF2 A33A 54FA"))))
#+END_SRC

** Non-Guix channel
- Give access to non-gnu package such as non-libre Linux kernel and nvidia driver
#+BEGIN_SRC scheme :tangle channels.scm :noweb yes
  (channel
   (name 'nonguix)
   (url "https://gitlab.com/nonguix/nonguix")
   (branch "master")
   ;;(commit
   ;;  "8c22d70b02d4cf42f64784296fbd267695cd3e4c") ;; last upd:
   (introduction
    (make-channel-introduction
     "897c1a470da759236cc11798f4e0a5f7d4d59fbc"
     (openpgp-fingerprint
      "2A39 3FFF 68F4 EF7A 3D29  12AF 6F51 20A0 22FB B2D5"))))
#+END_SRC

** Flat channel (obsolete because of package emacs-next-pgtk)
- Give access to (pgtk) native compilation emacs
#+BEGIN_SRC scheme :tangle channels.scm :noweb yes
 ;; (channel
 ;;  (name 'flat)
 ;;  (url "https://github.com/flatwhatson/guix-channel.git")
 ;;  (commit
 ;;   "e57424b680e1724105e2598b68c30084b180cf58") ;; last upd: 03/09/2022
 ;;  (introduction
 ;;   (make-channel-introduction
 ;;    "33f86a4b48205c0dc19d7c036c85393f0766f806"
 ;;    (openpgp-fingerprint
 ;;     "736A C00E 1254 378B A982  7AF6 9DBE 8265 81B6 4490"))))
#+END_SRC

** dwl-guile channel
- Give access as guile configurable dwl fork
#+BEGIN_SRC scheme :tangle channels.scm :noweb yes
;;(channel
;;  (name 'home-service-dwl-guile)
;;  (url "https://github.com/engstrand-config/home-service-dwl-guile")
;;  (branch "main")
;;  (introduction
;;    (make-channel-introduction
;;      "314453a87634d67e914cfdf51d357638902dd9fe"
;;      (openpgp-fingerprint
;;        "C9BE B8A0 4458 FDDF 1268 1B39 029D 8EB7 7E18 D68C"))))
#+END_SRC

** K8X1D channel
#+BEGIN_SRC scheme :tangle channels.scm :noweb yes
;;(channel
;; (name 'k8x1d)
;; (url "https://gitlab.com/oryp6/guix_set-up/guix-channel.git")
;; (introduction
;;  (make-channel-introduction
;;   "a3633fe58b4c9cfd6918b9d8abbbc394010a642d"
;;   (openpgp-fingerprint
;;    "E109 BDB7 58D9 36A9 F4E5 D749 7769 412E D873 CFB8"))))
#+END_SRC

** Guix science channel
- Provides recent versions of scientific software, which cannot be included upstream such as RStudio
#+BEGIN_SRC scheme :tangle channels.scm :noweb yes
(channel
  (name 'guix-science)
  (url "https://github.com/guix-science/guix-science.git")
  (introduction
   (make-channel-introduction
        "b1fe5aaff3ab48e798a4cce02f0212bc91f423dc"
        (openpgp-fingerprint
         "CA4F 8CF4 37D7 478F DA05  5FD4 4213 7701 1A37 8446"))))
#+END_SRC

** Guix hpc channel
- testing
#+BEGIN_SRC scheme :tangle channels.scm :noweb yes
(channel
 (name 'guix-hpc)
 (url "https://gitlab.inria.fr/guix-hpc/guix-hpc.git"))
#+END_SRC

** Guix hpc non-free channel
- Provides access to cuda
#+BEGIN_SRC scheme :tangle channels.scm :noweb yes
(channel
 (name 'guix-hpc-non-free)
 (url "https://gitlab.inria.fr/guix-hpc/guix-hpc-non-free.git"))
#+END_SRC



** Footer
#+BEGIN_SRC scheme :tangle channels.scm :noweb yes
  )
#+END_SRC

* Shepherd user services
** Init file
- That init file allow to split the services as independent
- see https://guix.gnu.org/en/blog/2020/gnu-shepherd-user-services/)

#+BEGIN_SRC scheme :tangle ~/.config/shepherd/init.scm :noweb yes
(use-modules (shepherd service)
             ((ice-9 ftw) #:select (scandir)))

;; Load all the files in the directory 'init.d' with a suffix '.scm'.
(for-each
  (lambda (file)
    (load (string-append "init.d/" file)))
  (scandir (string-append (dirname (current-filename)) "/init.d")
           (lambda (file)
             (string-suffix? ".scm" file))))

;; Send shepherd into the background
(action 'shepherd 'daemonize)
#+END_SRC

** Sound with pipewire
#+BEGIN_SRC scheme :tangle ~/.config/shepherd/init.d/pipewire.scm :noweb yes
;;(define pipewire
;;  (make <service>
;;    #:provides '(pipewire)
;;    #:docstring "Run pipewire in the background"
;;    #:start (make-forkexec-constructor
;;              '("pipewire"))
;;    #:stop (make-kill-destructor)
;;    #:respawn? #t))
;;(register-services pipewire)
;;
;;(start-in-the-background '(pipewire))
;;;;(start pipewire)
#+END_SRC

#+BEGIN_SRC scheme :tangle ~/.config/shepherd/init.d/pipewire-pulse.scm :noweb yes
;;(define pipewire-pulse
;;  (make <service>
;;    #:provides '(pipewire-pulse)
;;    #:require '(pipewire)
;;    #:docstring "Run pipewire-pulse in the background"
;;    #:start (make-forkexec-constructor
;;              '("pipewire-pulse"))
;;    #:stop (make-kill-destructor)
;;    #:respawn? #t))
;;(register-services pipewire-pulse)
;;
;;(start-in-the-background '(pipewire-pulse))
;;;;(start pipewire-pulse)
#+END_SRC

#+BEGIN_SRC scheme :tangle ~/.config/shepherd/init.d/wireplumber.scm :noweb yes
;;(define wireplumber
;;  (make <service>
;;    #:provides '(wireplumber)
;;    #:require '(pipewire-pulse)
;;    #:docstring "Run wireplumber in the background"
;;    #:start (make-forkexec-constructor
;;             '("wireplumber"))
;;    #:stop (make-kill-destructor)
;;    #:respawn? #t))
;;(register-services wireplumber)
;;
;;(start-in-the-background '(wireplumber))
;;;;(start wireplumber)
#+END_SRC

** Compositor
#+BEGIN_SRC scheme :tangle ~/.config/shepherd/init.d/picom.scm :noweb yes
;;    (define picom
;;      (make <service>
;;        #:provides '(picom)
;;        #:docstring "Run picom in the background"
;;        #:start (make-forkexec-constructor
;;                  '("picom"))
;;        #:stop (make-kill-destructor)
;;        #:respawn? #t))
;;    (register-services picom)
;;
;;  (start-in-the-background '(picom))
;;  ;;(start picom)
#+END_SRC

** Battery_notifications
#+BEGIN_SRC scheme :tangle ~/.config/shepherd/init.d/battery_notifications.scm :noweb yes
    (define battery_notifications
      (make <service>
        #:provides '(battery_notifications)
        #:docstring "Run battery_notifications in the background"
        #:start (make-forkexec-constructor
                  '("~/.config/guix/utilities/battery_notifications.sh"))
        #:stop (make-kill-destructor)
        #:respawn? #t))
    (register-services battery_notifications)

  (start-in-the-background '(battery_notifications))
  ;;(start battery_notifications)
#+END_SRC



** Emacs daemon
#+BEGIN_SRC scheme :tangle ~/.config/shepherd/init.d/emacsd.scm :noweb yes
;;(define emacsd
;;  (make <service>
;;    #:provides '(emacsd)
;;    #:docstring "Emacs daemon"
;;    #:start (make-forkexec-constructor
;;              '("emacs" "--daemon"))
;;    #:stop (make-kill-destructor)
;;    #:respawn? #f))
;;(register-services emacsd)
;;
;;;;(start emacsd)
;;  (start-in-the-background '(emacsd))
#+END_SRC

** Color temperature adjustment
#+BEGIN_SRC scheme :tangle ~/.config/shepherd/init.d/redshift.scm :noweb yes
;;  (define redshift
;;    (make <service>
;;      #:provides '(redshift)
;;      #:docstring "Run redshift in the background"
;;      #:start (make-forkexec-constructor
;;               '("redshift" "-l" "53.55014:-113.46871" "-t" "6500:3000"))
;;      #:stop (make-kill-destructor)
;;      #:respawn? #t))
;;  (register-services redshift)
;;
;;  (start-in-the-background '(redshift))
#+END_SRC
* Utilities
** Battery notifications
#+BEGIN_SRC bash :tangle utilities/battery_notifications.sh :shebang "#!/bin/sh"
# inspired by https://askubuntu.com/questions/518928/how-to-write-a-script-to-listen-to-battery-status-and-alert-me-when-its-above
warning_level=30
critic_level=10
while true
do
   battery_level=`acpi -b | grep -P -o '[0-9]+(?=%)'`
   battery_charging=`acpi -b | grep -c 'Charging'`
   if [ $battery_level -le $warning_level ] && [ $battery_level -gt $critic_level ] && [ $battery_charging -eq "0" ]; then
       dunstify "Battery getting low..." "$battery_level% left"    
   elif [ $battery_level -le $critic_level ] && [ $battery_charging -eq "0" ]; then
       dunstify "Critically low battery level..." "$battery_level% left"    
   fi
    sleep 300 # 300 seconds or 5 minutes
done
#+END_SRC

** Other packages manager
Guix lack some useful packages that are accessible thought nix and flatpak.
The general rule used here follow this hierarchie of preference:
guix > nix > flatpak

*** Nix set-up
#+BEGIN_SRC bash :tangle utilities/nix_set-up :shebang "#!/bin/sh"
nix-channel --add https://nixos.org/channels/nixpkgs-unstable
nix-channel --update
nix-env -iA \
    nixpkgs.zotero \
    nixpkgs.julia-bin \
    nixpkgs.vscode \
    nixpkgs.neovim \
    nixpkgs.signal-desktop \
    nixpkgs.slack \
    nixpkgs.discord \
    nixpkgs.protonvpn-cli \
    nixpkgs.brave \
    nixpkgs.android-file-transfer \
    nixpkgs.system76-firmware


ln -s /nix/var/nix/profiles/per-user/k8x1d/profile ~/.nix-profile
#+END_SRC

*** Flatpak set-up
#+BEGIN_SRC bash :tangle utilities/guix_flatpak_set-up :shebang "#!/bin/sh"
flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo

flatpak install flathub --user com.sindresorhus.Caprine
flatpak install flathub --user us.zoom.Zoom

#+END_SRC

** Activate manifest
# TODO: create explicit script to do so
See https://guix.gnu.org/cookbook/en/html_node/Basic-setup-with-manifests.html
#+BEGIN_SRC bash :tangle utilities/R_set-up :shebang "#!/bin/sh"
GUIX_EXTRA_PROFILES=$HOME/.guix-extra-profiles
mkdir -p "$GUIX_EXTRA_PROFILES"/R # if it does not exist yet
guix package --substitute-urls="https://substitutes.guix.psychnotebook.org https://substitutes.nonguix.org https://ci.guix.gnu.org" --manifest=$HOME/.config/guix/manifests/R.scm --profile="$GUIX_EXTRA_PROFILES"/R/R
#+END_SRC

#+BEGIN_SRC bash :tangle utilities/python_set-up :shebang "#!/bin/sh"
GUIX_EXTRA_PROFILES=$HOME/.guix-extra-profiles
mkdir -p "$GUIX_EXTRA_PROFILES"/python # if it does not exist yet
guix package --manifest=$HOME/.config/guix/manifests/python.scm --profile="$GUIX_EXTRA_PROFILES"/python/python
#+END_SRC

#+BEGIN_SRC bash :tangle utilities/neovim_set-up :shebang "#!/bin/sh"
GUIX_EXTRA_PROFILES=$HOME/.guix-extra-profiles
mkdir -p "$GUIX_EXTRA_PROFILES"/neovim # if it does not exist yet
guix package --manifest=$HOME/.config/guix/manifests/neovim.scm --profile="$GUIX_EXTRA_PROFILES"/neovim/neovim
#+END_SRC

#+BEGIN_SRC bash :tangle utilities/emacs_set-up :shebang "#!/bin/sh"
GUIX_EXTRA_PROFILES=$HOME/.guix-extra-profiles
mkdir -p "$GUIX_EXTRA_PROFILES"/emacs # if it does not exist yet
guix package --manifest=$HOME/.config/guix/manifests/emacs.scm --profile="$GUIX_EXTRA_PROFILES"/emacs/emacs
#+END_SRC

#+BEGIN_SRC bash :tangle utilities/desktop_set-up :shebang "#!/bin/sh"
GUIX_EXTRA_PROFILES=$HOME/.guix-extra-profiles
mkdir -p "$GUIX_EXTRA_PROFILES"/desktop # if it does not exist yet
guix package --manifest=$HOME/.config/guix/manifests/desktop.scm --profile="$GUIX_EXTRA_PROFILES"/desktop/desktop
#+END_SRC

** Multihead set-up
#+BEGIN_SRC bash :tangle utilities/multihead_set-up :shebang "#!/bin/sh"
xrandr --output eDP-1 --auto --output HDMI-1-0 --auto --right-of eDP-1
#+END_SRC

** Polybar set-up
#+BEGIN_SRC bash :tangle utilities/polybar_set-up :shebang "#!/bin/sh"
killall polybar
for m in $(polybar --list-monitors | cut -d":" -f1); do
    MONITOR=$m polybar --reload example &
done
#+END_SRC

* Manifest
** Desktop
*** Header
#+BEGIN_SRC scheme :tangle manifests/desktop.scm :noweb yes
(specifications->manifest
 '(
#+END_SRC

*** Packages
Browsers
#+BEGIN_SRC scheme :tangle manifests/desktop.scm
"firefox"
#+END_SRC

Images manipulation
#+BEGIN_SRC scheme :tangle manifests/desktop.scm
"gimp"
#+END_SRC

Zip
#+BEGIN_SRC scheme :tangle manifests/desktop.scm
"unzip"
#+END_SRC

Ssh
#+BEGIN_SRC scheme :tangle manifests/desktop.scm
"openssh"
#+END_SRC

Remote desktop
#+BEGIN_SRC scheme :tangle manifests/desktop.scm
"openconnect"
"rdesktop"
#+END_SRC

Mpd client
#+BEGIN_SRC scheme :tangle manifests/desktop.scm
"mpc-mpd"
#+END_SRC

Word processors
#+BEGIN_SRC scheme :tangle manifests/desktop.scm
"libreoffice"
"texlive"
#+END_SRC

Monitoring
#+BEGIN_SRC scheme :tangle manifests/desktop.scm
"htop"
#+END_SRC

Gtk configuration
#+BEGIN_SRC scheme :tangle manifests/desktop.scm
"lxappearance"
#+END_SRC

*** Footer
#+BEGIN_SRC scheme :tangle manifests/desktop.scm
))
#+END_SRC



** Emacs
*** Header
#+BEGIN_SRC scheme :tangle manifests/emacs.scm :noweb yes
(specifications->manifest
 '(
#+END_SRC

*** Packages
Emacs distribution
#+BEGIN_SRC scheme :tangle manifests/emacs.scm :noweb yes
;;"emacs-native-comp"
"emacs-next-pgtk"
#+END_SRC

Tools for straight.el
#+BEGIN_SRC scheme :tangle manifests/emacs.scm :noweb yes
"git"
#+END_SRC

Tools to build emacs vterm
#+BEGIN_SRC scheme :tangle manifests/emacs.scm :noweb yes
"cmake"
"make"
"gcc-toolchain"
"libtool"
"perl"
#+END_SRC

Pass
#+BEGIN_SRC scheme :tangle manifests/emacs.scm :noweb yes
"password-store"
#+END_SRC

*** Footer
#+BEGIN_SRC scheme :tangle manifests/emacs.scm :noweb yes
))
#+END_SRC


** R
*** Header
#+BEGIN_SRC scheme :tangle manifests/R.scm :noweb yes
(specifications->manifest
 '(
#+END_SRC

*** Packages
Emacs distribution
#+BEGIN_SRC scheme :tangle manifests/R.scm :noweb yes
"r"
#+END_SRC

IDE
#+BEGIN_SRC scheme :tangle manifests/R.scm :noweb yes
"rstudio"
#+END_SRC

C Library
#+BEGIN_SRC scheme :tangle manifests/R.scm :noweb yes
"libxml2"
#+END_SRC

R Library
#+BEGIN_SRC scheme :tangle manifests/R.scm :noweb yes
"r-here"
"r-languageserver"
"r-tibble"
"r-future"
"r-readr"
"r-magrittr"
"r-plyr"
"r-dplyr"
"r-purrr"
"r-furrr"
"r-rjson"
#+END_SRC

*** Footer
#+BEGIN_SRC scheme :tangle manifests/R.scm :noweb yes
))
#+END_SRC

** Python
*** Header
#+BEGIN_SRC scheme :tangle manifests/python.scm :noweb yes
(specifications->manifest
 '(
#+END_SRC

*** Packages
python distribution
#+BEGIN_SRC scheme :tangle manifests/python.scm :noweb yes
"python"
#+END_SRC

Package manager
#+BEGIN_SRC scheme :tangle manifests/python.scm :noweb yes
"python-pip"
#+END_SRC

Dependencies
#+BEGIN_SRC scheme :tangle manifests/python.scm :noweb yes
"ffmpeg" ;;yt-dlp
#+END_SRC

*** Footer
#+BEGIN_SRC scheme :tangle manifests/python.scm :noweb yes
))
#+END_SRC


** Neovim (doesn't work... c library not up-to-date, neorg failed)
*** Header
#+BEGIN_SRC scheme :tangle manifests/neovim.scm :noweb yes
(specifications->manifest
 '(
#+END_SRC

*** Packages
Neovim distribution
#+BEGIN_SRC scheme :tangle manifests/neovim.scm :noweb yes
"neovim"
#+END_SRC

General
#+BEGIN_SRC scheme :tangle manifests/neovim.scm :noweb yes
"node"
#+END_SRC

Syntax highlighter
#+BEGIN_SRC scheme :tangle manifests/neovim.scm :noweb yes
"tree-sitter"
#+END_SRC

LSP
#+BEGIN_SRC scheme :tangle manifests/neovim.scm :noweb yes
"rust-cargo"
#+END_SRC

*** Footer
#+BEGIN_SRC scheme :tangle manifests/neovim.scm :noweb yes
))
#+END_SRC
